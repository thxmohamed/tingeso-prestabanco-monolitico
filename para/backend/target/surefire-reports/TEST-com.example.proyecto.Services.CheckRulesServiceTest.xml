<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.proyecto.Services.CheckRulesServiceTest" time="8.091" tests="35" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\chifl\Desktop\prestabanco-monolithic\backend\target\test-classes;C:\Users\chifl\Desktop\prestabanco-monolithic\backend\target\classes;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.3.4\spring-boot-starter-data-jpa-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.3.4\spring-boot-starter-aop-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-aop\6.1.13\spring-aop-6.1.13.jar;C:\Users\chifl\.m2\repository\org\aspectj\aspectjweaver\1.9.22.1\aspectjweaver-1.9.22.1.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.3.4\spring-boot-starter-jdbc-3.3.4.jar;C:\Users\chifl\.m2\repository\com\zaxxer\HikariCP\5.1.0\HikariCP-5.1.0.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-jdbc\6.1.13\spring-jdbc-6.1.13.jar;C:\Users\chifl\.m2\repository\org\hibernate\orm\hibernate-core\6.5.3.Final\hibernate-core-6.5.3.Final.jar;C:\Users\chifl\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\chifl\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\chifl\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\chifl\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\chifl\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\chifl\.m2\repository\net\bytebuddy\byte-buddy\1.14.19\byte-buddy-1.14.19.jar;C:\Users\chifl\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\chifl\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\chifl\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\chifl\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\chifl\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\chifl\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\chifl\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\chifl\.m2\repository\org\springframework\data\spring-data-jpa\3.3.4\spring-data-jpa-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\data\spring-data-commons\3.3.4\spring-data-commons-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-orm\6.1.13\spring-orm-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-context\6.1.13\spring-context-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-tx\6.1.13\spring-tx-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-beans\6.1.13\spring-beans-6.1.13.jar;C:\Users\chifl\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\chifl\.m2\repository\org\slf4j\slf4j-api\2.0.16\slf4j-api-2.0.16.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-aspects\6.1.13\spring-aspects-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.3.4\spring-boot-starter-web-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter\3.3.4\spring-boot-starter-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot\3.3.4\spring-boot-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.3.4\spring-boot-autoconfigure-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.3.4\spring-boot-starter-logging-3.3.4.jar;C:\Users\chifl\.m2\repository\ch\qos\logback\logback-classic\1.5.8\logback-classic-1.5.8.jar;C:\Users\chifl\.m2\repository\ch\qos\logback\logback-core\1.5.8\logback-core-1.5.8.jar;C:\Users\chifl\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.23.1\log4j-to-slf4j-2.23.1.jar;C:\Users\chifl\.m2\repository\org\apache\logging\log4j\log4j-api\2.23.1\log4j-api-2.23.1.jar;C:\Users\chifl\.m2\repository\org\slf4j\jul-to-slf4j\2.0.16\jul-to-slf4j-2.0.16.jar;C:\Users\chifl\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.3.4\spring-boot-starter-json-3.3.4.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.17.2\jackson-databind-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.17.2\jackson-annotations-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.17.2\jackson-core-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.17.2\jackson-datatype-jdk8-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.17.2\jackson-datatype-jsr310-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.17.2\jackson-module-parameter-names-2.17.2.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.3.4\spring-boot-starter-tomcat-3.3.4.jar;C:\Users\chifl\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.30\tomcat-embed-core-10.1.30.jar;C:\Users\chifl\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.30\tomcat-embed-el-10.1.30.jar;C:\Users\chifl\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.30\tomcat-embed-websocket-10.1.30.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-web\6.1.13\spring-web-6.1.13.jar;C:\Users\chifl\.m2\repository\io\micrometer\micrometer-observation\1.13.4\micrometer-observation-1.13.4.jar;C:\Users\chifl\.m2\repository\io\micrometer\micrometer-commons\1.13.4\micrometer-commons-1.13.4.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-webmvc\6.1.13\spring-webmvc-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-expression\6.1.13\spring-expression-6.1.13.jar;C:\Users\chifl\.m2\repository\com\mysql\mysql-connector-j\8.3.0\mysql-connector-j-8.3.0.jar;C:\Users\chifl\.m2\repository\org\projectlombok\lombok\1.18.34\lombok-1.18.34.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.3.4\spring-boot-starter-test-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-test\3.3.4\spring-boot-test-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.3.4\spring-boot-test-autoconfigure-3.3.4.jar;C:\Users\chifl\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\chifl\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\chifl\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\chifl\.m2\repository\net\minidev\json-smart\2.5.1\json-smart-2.5.1.jar;C:\Users\chifl\.m2\repository\net\minidev\accessors-smart\2.5.1\accessors-smart-2.5.1.jar;C:\Users\chifl\.m2\repository\org\ow2\asm\asm\9.6\asm-9.6.jar;C:\Users\chifl\.m2\repository\org\assertj\assertj-core\3.25.3\assertj-core-3.25.3.jar;C:\Users\chifl\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\chifl\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\chifl\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.3\junit-jupiter-5.10.3.jar;C:\Users\chifl\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.3\junit-jupiter-api-5.10.3.jar;C:\Users\chifl\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\chifl\.m2\repository\org\junit\platform\junit-platform-commons\1.10.3\junit-platform-commons-1.10.3.jar;C:\Users\chifl\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\chifl\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.3\junit-jupiter-params-5.10.3.jar;C:\Users\chifl\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.3\junit-jupiter-engine-5.10.3.jar;C:\Users\chifl\.m2\repository\org\junit\platform\junit-platform-engine\1.10.3\junit-platform-engine-1.10.3.jar;C:\Users\chifl\.m2\repository\org\mockito\mockito-core\5.11.0\mockito-core-5.11.0.jar;C:\Users\chifl\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.19\byte-buddy-agent-1.14.19.jar;C:\Users\chifl\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\chifl\.m2\repository\org\mockito\mockito-junit-jupiter\5.11.0\mockito-junit-jupiter-5.11.0.jar;C:\Users\chifl\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\chifl\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-core\6.1.13\spring-core-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-jcl\6.1.13\spring-jcl-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-test\6.1.13\spring-test-6.1.13.jar;C:\Users\chifl\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\chifl\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="America/Santiago"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="ES"/>
    <property name="sun.boot.library.path" value="C:\workspace\jdk-17_windows-x64_bin\jdk-17.0.12\bin"/>
    <property name="sun.java.command" value="C:\Users\chifl\AppData\Local\Temp\surefire989812607014805115\surefirebooter-20241104135831259_3.jar C:\Users\chifl\AppData\Local\Temp\surefire989812607014805115 2024-11-04T13-58-31_023-jvmRun1 surefire-20241104135831259_1tmp surefire_0-20241104135831259_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\chifl\Desktop\prestabanco-monolithic\backend\target\test-classes;C:\Users\chifl\Desktop\prestabanco-monolithic\backend\target\classes;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.3.4\spring-boot-starter-data-jpa-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.3.4\spring-boot-starter-aop-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-aop\6.1.13\spring-aop-6.1.13.jar;C:\Users\chifl\.m2\repository\org\aspectj\aspectjweaver\1.9.22.1\aspectjweaver-1.9.22.1.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.3.4\spring-boot-starter-jdbc-3.3.4.jar;C:\Users\chifl\.m2\repository\com\zaxxer\HikariCP\5.1.0\HikariCP-5.1.0.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-jdbc\6.1.13\spring-jdbc-6.1.13.jar;C:\Users\chifl\.m2\repository\org\hibernate\orm\hibernate-core\6.5.3.Final\hibernate-core-6.5.3.Final.jar;C:\Users\chifl\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\chifl\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\chifl\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\chifl\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\chifl\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\chifl\.m2\repository\net\bytebuddy\byte-buddy\1.14.19\byte-buddy-1.14.19.jar;C:\Users\chifl\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\chifl\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\chifl\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\chifl\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\chifl\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\chifl\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\chifl\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\chifl\.m2\repository\org\springframework\data\spring-data-jpa\3.3.4\spring-data-jpa-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\data\spring-data-commons\3.3.4\spring-data-commons-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-orm\6.1.13\spring-orm-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-context\6.1.13\spring-context-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-tx\6.1.13\spring-tx-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-beans\6.1.13\spring-beans-6.1.13.jar;C:\Users\chifl\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\chifl\.m2\repository\org\slf4j\slf4j-api\2.0.16\slf4j-api-2.0.16.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-aspects\6.1.13\spring-aspects-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.3.4\spring-boot-starter-web-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter\3.3.4\spring-boot-starter-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot\3.3.4\spring-boot-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.3.4\spring-boot-autoconfigure-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.3.4\spring-boot-starter-logging-3.3.4.jar;C:\Users\chifl\.m2\repository\ch\qos\logback\logback-classic\1.5.8\logback-classic-1.5.8.jar;C:\Users\chifl\.m2\repository\ch\qos\logback\logback-core\1.5.8\logback-core-1.5.8.jar;C:\Users\chifl\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.23.1\log4j-to-slf4j-2.23.1.jar;C:\Users\chifl\.m2\repository\org\apache\logging\log4j\log4j-api\2.23.1\log4j-api-2.23.1.jar;C:\Users\chifl\.m2\repository\org\slf4j\jul-to-slf4j\2.0.16\jul-to-slf4j-2.0.16.jar;C:\Users\chifl\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.3.4\spring-boot-starter-json-3.3.4.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.17.2\jackson-databind-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.17.2\jackson-annotations-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.17.2\jackson-core-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.17.2\jackson-datatype-jdk8-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.17.2\jackson-datatype-jsr310-2.17.2.jar;C:\Users\chifl\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.17.2\jackson-module-parameter-names-2.17.2.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.3.4\spring-boot-starter-tomcat-3.3.4.jar;C:\Users\chifl\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.30\tomcat-embed-core-10.1.30.jar;C:\Users\chifl\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.30\tomcat-embed-el-10.1.30.jar;C:\Users\chifl\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.30\tomcat-embed-websocket-10.1.30.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-web\6.1.13\spring-web-6.1.13.jar;C:\Users\chifl\.m2\repository\io\micrometer\micrometer-observation\1.13.4\micrometer-observation-1.13.4.jar;C:\Users\chifl\.m2\repository\io\micrometer\micrometer-commons\1.13.4\micrometer-commons-1.13.4.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-webmvc\6.1.13\spring-webmvc-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-expression\6.1.13\spring-expression-6.1.13.jar;C:\Users\chifl\.m2\repository\com\mysql\mysql-connector-j\8.3.0\mysql-connector-j-8.3.0.jar;C:\Users\chifl\.m2\repository\org\projectlombok\lombok\1.18.34\lombok-1.18.34.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.3.4\spring-boot-starter-test-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-test\3.3.4\spring-boot-test-3.3.4.jar;C:\Users\chifl\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.3.4\spring-boot-test-autoconfigure-3.3.4.jar;C:\Users\chifl\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\chifl\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\chifl\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\chifl\.m2\repository\net\minidev\json-smart\2.5.1\json-smart-2.5.1.jar;C:\Users\chifl\.m2\repository\net\minidev\accessors-smart\2.5.1\accessors-smart-2.5.1.jar;C:\Users\chifl\.m2\repository\org\ow2\asm\asm\9.6\asm-9.6.jar;C:\Users\chifl\.m2\repository\org\assertj\assertj-core\3.25.3\assertj-core-3.25.3.jar;C:\Users\chifl\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\chifl\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\chifl\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.3\junit-jupiter-5.10.3.jar;C:\Users\chifl\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.3\junit-jupiter-api-5.10.3.jar;C:\Users\chifl\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\chifl\.m2\repository\org\junit\platform\junit-platform-commons\1.10.3\junit-platform-commons-1.10.3.jar;C:\Users\chifl\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\chifl\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.3\junit-jupiter-params-5.10.3.jar;C:\Users\chifl\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.3\junit-jupiter-engine-5.10.3.jar;C:\Users\chifl\.m2\repository\org\junit\platform\junit-platform-engine\1.10.3\junit-platform-engine-1.10.3.jar;C:\Users\chifl\.m2\repository\org\mockito\mockito-core\5.11.0\mockito-core-5.11.0.jar;C:\Users\chifl\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.19\byte-buddy-agent-1.14.19.jar;C:\Users\chifl\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\chifl\.m2\repository\org\mockito\mockito-junit-jupiter\5.11.0\mockito-junit-jupiter-5.11.0.jar;C:\Users\chifl\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\chifl\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-core\6.1.13\spring-core-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-jcl\6.1.13\spring-jcl-6.1.13.jar;C:\Users\chifl\.m2\repository\org\springframework\spring-test\6.1.13\spring-test-6.1.13.jar;C:\Users\chifl\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\chifl\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\chifl"/>
    <property name="user.language" value="es"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-07-16"/>
    <property name="java.home" value="C:\workspace\jdk-17_windows-x64_bin\jdk-17.0.12"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\chifl\Desktop\prestabanco-monolithic\backend"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="windows-1252"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\chifl\AppData\Local\Temp\surefire989812607014805115\surefirebooter-20241104135831259_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.12+8-LTS-286"/>
    <property name="user.name" value="chifl"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\chifl\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\chifl\AppData\Local\Temp\"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="17.0.12"/>
    <property name="user.dir" value="C:\Users\chifl\Desktop\prestabanco-monolithic\backend"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="5172"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="windows-1252"/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\workspace\jdk-17_windows-x64_bin\jdk-17.0.12\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\workspace\apache-maven-3.9.9\bin;C:\workspace\jdk-17_windows-x64_bin\jdk-17.0.12\bin;C:\Program Files\nodejs\;C:\MinGW\bin;;C:\Program Files\Docker\Docker\resources\bin;C:\Users\chifl\AppData\Local\Microsoft\WindowsApps;C:\Users\chifl\AppData\Local\gitkraken\bin;C:\Users\chifl\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\chifl\AppData\Roaming\TinyTeX\bin\windows;C:\Users\chifl\AppData\Roaming\npm;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.12+8-LTS-286"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[proyecto] "/>
  </properties>
  <testcase name="whenNoCheckRulesInDatabase_ThenGetAllReturnsEmptyList" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.743">
    <system-out><![CDATA[13:58:32.371 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.example.proyecto.Services.CheckRulesServiceTest]: CheckRulesServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
13:58:32.533 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.example.proyecto.ProyectoApplication for test class com.example.proyecto.Services.CheckRulesServiceTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.4)

2024-11-04T13:58:33.057-03:00  INFO 5172 --- [proyecto] [           main] c.e.p.Services.CheckRulesServiceTest     : Starting CheckRulesServiceTest using Java 17.0.12 with PID 5172 (started by chifl in C:\Users\chifl\Desktop\prestabanco-monolithic\backend)
2024-11-04T13:58:33.059-03:00  INFO 5172 --- [proyecto] [           main] c.e.p.Services.CheckRulesServiceTest     : The following 1 profile is active: "test"
2024-11-04T13:58:33.916-03:00  INFO 5172 --- [proyecto] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-11-04T13:58:34.029-03:00  INFO 5172 --- [proyecto] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 100 ms. Found 4 JPA repository interfaces.
2024-11-04T13:58:34.670-03:00  INFO 5172 --- [proyecto] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-11-04T13:58:34.798-03:00  INFO 5172 --- [proyecto] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.3.Final
2024-11-04T13:58:34.856-03:00  INFO 5172 --- [proyecto] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-11-04T13:58:35.366-03:00  INFO 5172 --- [proyecto] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-11-04T13:58:35.421-03:00  INFO 5172 --- [proyecto] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-11-04T13:58:35.772-03:00  INFO 5172 --- [proyecto] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-11-04T13:58:35.774-03:00  INFO 5172 --- [proyecto] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-11-04T13:58:35.799-03:00  WARN 5172 --- [proyecto] [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2024-11-04T13:58:36.714-03:00  INFO 5172 --- [proyecto] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: drop table if exists check_rules cascade 
Hibernate: drop table if exists credit cascade 
Hibernate: drop table if exists document cascade 
Hibernate: drop table if exists users cascade 
Hibernate: create table check_rules (rule1 boolean not null, rule2 boolean not null, rule3 boolean not null, rule4 boolean not null, rule6 boolean not null, rule71 boolean not null, rule72 boolean not null, rule73 boolean not null, rule74 boolean not null, rule75 boolean not null, clientid bigint, creditid bigint unique, id bigint generated by default as identity, primary key (id))
Hibernate: create table credit (administration_commission float(24) not null, interest_rate float(24) not null, monthly_fee float(24) not null, property_value integer not null, requested_amount float(24) not null, years_limit integer not null, clientid bigint, id bigint generated by default as identity, observations varchar(255), loan_type enum ('PRIMERA_VIVIENDA','PROPIEDADES_COMERCIALES','REMODELACION','SEGUNDA_VIVIENDA'), status enum ('E1_EN_REVISION_INICIAL','E2_PENDIENTE_DOCUMENTACION','E3_EN_EVALUACION','E4_PRE_APROBADA','E5_EN_APROBACION_FINAL','E6_APROBADA','E7_RECHAZADA','E8_CANCELADA_POR_CLIENTE','E9_EN_DESEMBOLSO'), primary key (id))
Hibernate: create table document (creditid bigint, id bigint generated by default as identity, filename varchar(255), file_data blob, primary key (id))
Hibernate: create table users (age integer not null, income float(24) not null, id bigint generated by default as identity, email varchar(255) unique, last_name varchar(255), name varchar(255), password varchar(255), rut varchar(255) unique, rol enum ('CUSTOMER','EXECUTIVE'), primary key (id))
2024-11-04T13:58:36.775-03:00  INFO 5172 --- [proyecto] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-11-04T13:58:37.223-03:00  INFO 5172 --- [proyecto] [           main] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2024-11-04T13:58:38.113-03:00  WARN 5172 --- [proyecto] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-11-04T13:58:38.611-03:00  INFO 5172 --- [proyecto] [           main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-11-04T13:58:38.707-03:00  INFO 5172 --- [proyecto] [           main] c.e.p.Services.CheckRulesServiceTest     : Started CheckRulesServiceTest in 5.996 seconds (process running for 7.255)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
]]></system-out>
  </testcase>
  <testcase name="whenGetCheckRulesByCreditID_NotFound_ThenReturnNull" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.062">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.creditid=?
]]></system-out>
  </testcase>
  <testcase name="whenDebtIncomeBelowThreshold_ThenRule4IsUpdatedToTrue" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.108">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into users (age,email,income,last_name,name,password,rol,rut,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into credit (administration_commission,clientid,interest_rate,loan_type,monthly_fee,observations,property_value,requested_amount,status,years_limit,id) values (?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0 where ce1_0.id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0 where ue1_0.id=?
Hibernate: update check_rules cre1_0 set rule4=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckCreditHistory_WithTrueValue_ThenRule2IsUpdatedToTrue" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.029">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: delete from credit where id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: delete from users where id=?
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule2=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckCreditHistory_WithNonExistentCheckId_ThenThrowException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.018">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenApplicantAgeExceedsLimit_ThenRule6IsUpdatedToFalse" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.024">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into users (age,email,income,last_name,name,password,rol,rut,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into credit (administration_commission,clientid,interest_rate,loan_type,monthly_fee,observations,property_value,requested_amount,status,years_limit,id) values (?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0 where ce1_0.id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0 where ue1_0.id=?
Hibernate: update check_rules cre1_0 set rule6=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckApplicantAge_WithNonExistentID_ThenDoNothing" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.017">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: delete from credit where id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: delete from users where id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenApplicantAgeWithinLimit_ThenRule6IsUpdatedToTrue" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.027">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into users (age,email,income,last_name,name,password,rol,rut,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into credit (administration_commission,clientid,interest_rate,loan_type,monthly_fee,observations,property_value,requested_amount,status,years_limit,id) values (?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0 where ce1_0.id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0 where ue1_0.id=?
Hibernate: update check_rules cre1_0 set rule6=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckPeriodicDepositsWithExistingCheckId_ThenRule73IsUpdated" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.022">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: delete from credit where id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: delete from users where id=?
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule73=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckDebtIncome_WithNonExistentCheckId_ThenThrowException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.013">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenGetCheckRulesById_NotFound_ThenReturnNull" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.012">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCreditOrUserEntityNotFound_ThenDoNothing" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.019">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0 where ce1_0.id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0 where ue1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckRelationQuotaIncome_SuccessAndQuotaWithin35Percent" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.023">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into credit (administration_commission,clientid,interest_rate,loan_type,monthly_fee,observations,property_value,requested_amount,status,years_limit,id) values (?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0 where ce1_0.id=?
Hibernate: update check_rules cre1_0 set rule1=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckEmploymentStability_WithFalseValue_ThenRule3IsUpdatedToFalse" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.024">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: delete from credit where id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule3=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenGetAllCheckRules_ThenOk" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.022">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
]]></system-out>
  </testcase>
  <testcase name="whenGetCheckRulesByCreditID_ThenReturnCheckRules" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.018">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.creditid=?
]]></system-out>
  </testcase>
  <testcase name="whenGetCheckRulesByID_ThenReturnCheckRules" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.012">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckPeriodicDepositsWithNonExistentCheckId_ThenThrowEntityNotFoundException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.009">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckRecentWithdrawalsWithNonExistentCheckId_ThenThrowEntityNotFoundException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.011">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckRulesEntityNotFound_ThenThrowException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.01">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckSavingHistoryWithExistingCheckId_ThenRule72IsUpdated" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.017">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule72=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckEmploymentStability_WithNonExistentCheckId_ThenThrowException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.01">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckRecentWithdrawalsWithExistingCheckId_ThenRule75IsUpdated" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.014">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule75=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckCreditHistory_WithFalseValue_ThenRule2IsUpdatedToFalse" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.018">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule2=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckMinimumBalanceWithExistingCheckId_ThenRule71IsUpdated" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.017">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule71=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckEmploymentStability_WithTrueValue_ThenRule3IsUpdatedToTrue" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.019">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule3=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckSavingHistoryWithNonExistentCheckId_ThenThrowEntityNotFoundException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.012">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckBalanceYearsAgoWithExistingCheckId_ThenRule74IsUpdated" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.018">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: update check_rules cre1_0 set rule74=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenDebtIncomeAboveThreshold_ThenRule4IsUpdatedToFalse" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.022">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into users (age,email,income,last_name,name,password,rol,rut,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into credit (administration_commission,clientid,interest_rate,loan_type,monthly_fee,observations,property_value,requested_amount,status,years_limit,id) values (?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0 where ce1_0.id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0 where ue1_0.id=?
Hibernate: update check_rules cre1_0 set rule4=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCreateRuleWithIncompleteData_ThenThrowsException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.015">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: delete from credit where id=?
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: delete from users where id=?
]]></system-out>
  </testcase>
  <testcase name="whenCreateRule_ThenOk" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.01">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
]]></system-out>
  </testcase>
  <testcase name="whenCheckMinimumBalanceWithNonExistentCheckId_ThenThrowEntityNotFoundException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.012">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCreditEntityNotFound_ThenThrowException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.011">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0 where ce1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckBalanceYearsAgoWithNonExistentCheckId_ThenThrowEntityNotFoundException" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.012">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: delete from check_rules where id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="whenCheckRelationQuotaIncome_SuccessAndQuotaExceeds35Percent" classname="com.example.proyecto.Services.CheckRulesServiceTest" time="0.016">
    <system-out><![CDATA[Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0
Hibernate: select ue1_0.id,ue1_0.age,ue1_0.email,ue1_0.income,ue1_0.last_name,ue1_0.name,ue1_0.password,ue1_0.rol,ue1_0.rut from users ue1_0
Hibernate: insert into credit (administration_commission,clientid,interest_rate,loan_type,monthly_fee,observations,property_value,requested_amount,status,years_limit,id) values (?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into check_rules (clientid,creditid,rule1,rule2,rule3,rule4,rule6,rule71,rule72,rule73,rule74,rule75,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
Hibernate: select ce1_0.id,ce1_0.administration_commission,ce1_0.clientid,ce1_0.interest_rate,ce1_0.loan_type,ce1_0.monthly_fee,ce1_0.observations,ce1_0.property_value,ce1_0.requested_amount,ce1_0.status,ce1_0.years_limit from credit ce1_0 where ce1_0.id=?
Hibernate: update check_rules cre1_0 set rule1=? where cre1_0.id=?
Hibernate: select cre1_0.id,cre1_0.clientid,cre1_0.creditid,cre1_0.rule1,cre1_0.rule2,cre1_0.rule3,cre1_0.rule4,cre1_0.rule6,cre1_0.rule71,cre1_0.rule72,cre1_0.rule73,cre1_0.rule74,cre1_0.rule75 from check_rules cre1_0 where cre1_0.id=?
]]></system-out>
  </testcase>
</testsuite>